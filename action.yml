name: 'DK Git Salesforce CLI Setup'
description: 'Configuring Salesforce CLI with user details'

inputs:
  user_name:
    required: true
    type: string
  instance_url:
    type: string
    default: https://login.salesforce.com
  password:
    required: true
    description: combination of <password>:<security_token>
  sfdc_client_id:
    required: true
    description: Consumer Key of a connected App created within salesforce
  sfdc_client_secret:
    required: true
    description: Consumer Secret of a connected App created within salesforce
# Mapping the workflow outputs with job outputs
outputs:
  error:
    description: "The second output string"
    value: ${{ steps.sfdc_auth.outputs.error }}
  error_description:
    description: "The second output string"
    value: ${{ steps.sfdc_auth.outputs.error_description }}
runs:
  using: "composite"
  steps:
    # Authenticating user to get access_token using existing GitHub action: 
    - id: sfdc_auth
      name: Salesforce User Authentication
      uses: karamchandanid/sfdc-credentials-auth@v2
      with:
        sfdc_client_id: ${{ inputs.sfdc_client_id }}
        sfdc_client_secret: ${{ inputs.sfdc_client_secret }}
        user_name: ${{ inputs.user_name }}
        password: ${{ inputs.password }}
        login_url: ${{ inputs.instance_url}}
    #
    # validating access_token
    - name: Validating User access_token
      id: validate_access_token
      shell: bash
      run: |
        # Validating access_token if null then terminate the process
        if [[ -z ${{ steps.sfdc_auth.outputs.access_token }} ]] || [[ ${{ steps.sfdc_auth.outputs.access_token }} == "null" ]];
        then 
          echo "----------------------------------"
          echo "Error in salesforce authentication"
          echo "----------------------------------"
          echo "$error ${{ steps.sfdc_auth.outputs.error }} : ${{ steps.sfdc_auth.outputs.error_description }}"
          echo ""
          echo ::set-output name=valid_access_token::false
        fi
        echo ::set-output name=valid_access_token::true
    #
    # Installing Salesforce CLI
    - name: "Installing Salesforce CLI"
      if: ${{ steps.validate_access_token.outputs.valid_access_token == true}}
      shell: bash
      # used to download files from the server even when the user has not logged on to the system and it can work in the background without hindering the current process
      run: |
        wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
        mkdir ~/sfdx
        tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
        echo "$HOME/sfdx/bin" >> $GITHUB_PATH
        ~/sfdx/bin/sfdx version
    #
    # Authenticate with access_token
    - id: sfdx_auth_store
      if: ${{ steps.validate_access_token.outputs.valid_access_token == true}}
      shell: bash
      name: 'Authenticate org with Access Tokcen and setting up default username'
      run: |
        echo ${{ steps.validate_access_token.outputs.valid_access_token }}
        echo ${{ steps.validate_access_token.outputs.valid_access_token == true }}
        echo ${{ steps.validate_access_token.outputs.valid_access_token == "true" }}
        echo ${{ steps.validate_access_token.outputs.valid_access_token == "false" }}
        echo ${{ steps.validate_access_token.outputs.valid_access_token == false }}
        # exporting access_token config
        export SFDX_ACCESS_TOKEN=${{ steps.sfdc_auth.outputs.access_token }}
        echo $(sfdx auth:accesstoken:store --instanceurl ${{ steps.sfdc_auth.outputs.instance_url }} -s -a git-check --noprompt) > ./SFDX_AUTH_DETAILS.txt
        FILE_DATA=$(<./SFDX_AUTH_DETAILS.txt); SFDX_AUTH_USERNAME=$(echo $FILE_DATA| cut -d' ' -f 3);

        # configuring defaultusername for further process
        sfdx config:set defaultusername=$SFDX_AUTH_USERNAME -g
